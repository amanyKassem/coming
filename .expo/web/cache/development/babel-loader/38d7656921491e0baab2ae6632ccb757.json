{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport CONST from \"../consts\";\nimport { Toast } from \"native-base\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nexport var profile = function profile(lang, token) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'GET',\n              url: CONST.url + 'profile',\n              params: {\n                lang: lang\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              var data = response.data;\n              dispatch({\n                type: 'profile_data',\n                data: data\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var updateProfile = function updateProfile(lang, name, phone, email, avatar, token) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'edit-profile',\n              method: 'POST',\n              params: {\n                lang: lang\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              },\n              data: {\n                name: name,\n                phone: phone,\n                email: email,\n                avatar: avatar\n              }\n            }).then(function (response) {\n              dispatch({\n                type: 'update_profile',\n                data: response.data.data\n              });\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var changePass = function changePass(lang, old_password, current_password, token) {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'edit-password',\n              method: 'POST',\n              params: {\n                lang: lang\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              },\n              data: {\n                old_password: old_password,\n                current_password: current_password\n              }\n            }).then(function (response) {\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var logout = function logout(lang, token) {\n  return function (dispatch) {\n    AsyncStorage.multiRemove(['token', 'auth', 'profile']);\n    AsyncStorage.getItem('deviceID').then(function (device_id) {\n      axios({\n        url: CONST.url + 'logout',\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer ' + token\n        },\n        data: {\n          lang: lang,\n          device_id: device_id\n        }\n      }).then(function (response) {});\n    });\n    dispatch({\n      type: 'logout'\n    });\n  };\n};","map":{"version":3,"sources":["/Users/ahmedtaha/Documents/work/react/amany/Archive/src/actions/ProfileAction.js"],"names":["axios","CONST","Toast","AsyncStorage","profile","lang","token","dispatch","method","url","params","headers","Authorization","then","response","data","type","updateProfile","name","phone","email","avatar","show","text","message","success","duration","textStyle","color","fontFamily","textAlign","changePass","old_password","current_password","logout","multiRemove","getItem","device_id"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport CONST from '../consts'\nimport {Toast} from \"native-base\";\nimport {AsyncStorage} from \"react-native\";\n\n\nexport const profile = (lang , token) => {\n    return async (dispatch) => {\n        await axios({\n            method      : 'GET',\n            url         : CONST.url + 'profile',\n            params      : { lang },\n            headers     : {Authorization: 'Bearer ' + token}\n        }).then(response => {\n            const data = response.data;\n            dispatch({type: 'profile_data', data})\n        })\n    }\n};\n\nexport const updateProfile = (lang , name , phone ,email , avatar , token ) => {\n    return async (dispatch) => {\n       await axios({\n            url: CONST.url + 'edit-profile',\n            method      : 'POST',\n            params      : { lang },\n            headers     : {Authorization: 'Bearer ' + token},\n            data        : { name , phone ,email , avatar }\n        }).then(response => {\n\n            dispatch({type: 'update_profile', data:response.data.data});\n\n            // if (response.data.success) {\n            //     navigation.navigate('profile');\n            // }\n\n            Toast.show({\n                text        : response.data.message,\n                type        : response.data.success ? \"success\" : \"danger\",\n                duration    : 3000,\n                textStyle       : {\n                    color           : \"white\",\n                    fontFamily      : 'flatRegular',\n                    textAlign       : 'center'\n                }\n            });\n\n        })\n    }\n}\n\nexport const changePass = (lang , old_password , current_password , token) => {\n    return async (dispatch) => {\n       await axios({\n            url         : CONST.url + 'edit-password',\n            method      : 'POST',\n            params      : { lang },\n            headers     : {Authorization: 'Bearer ' + token},\n            data        : {old_password , current_password }\n        }).then(response => {\n            Toast.show({\n                text        : response.data.message,\n                type        : response.data.success ? \"success\" : \"danger\",\n                duration    : 3000,\n                textStyle   : {\n                    color       : \"white\",\n                    fontFamily  : 'flatRegular',\n                    textAlign   : 'center'\n                }\n            });\n        });\n\n    }\n};\n\nexport const logout = (lang , token) => {\n    return (dispatch) => {\n        AsyncStorage.multiRemove(['token', 'auth', 'profile']);\n\n        AsyncStorage.getItem('deviceID').then(device_id => {\n            axios({\n                url         : CONST.url + 'logout',\n                method      : 'POST',\n                headers     : {Authorization: 'Bearer ' + token},\n                data        : { lang ,device_id }\n            }).then(response => { });\n        });\n\n        dispatch({type: 'logout'})\n    }\n};\n\n"]},"metadata":{},"sourceType":"module"}