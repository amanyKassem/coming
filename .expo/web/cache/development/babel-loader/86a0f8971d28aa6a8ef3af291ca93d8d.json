{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport CONST from \"../consts\";\nimport { Toast } from \"native-base\";\nexport var getPlaces = function getPlaces(lang, token) {\n  return function (dispatch) {\n    Places(lang, token, dispatch);\n  };\n};\nexport var deletePlace = function deletePlace(lang, id, token) {\n  return function (dispatch) {\n    axios({\n      url: CONST.url + 'delete-place',\n      method: 'POST',\n      data: {\n        id: id\n      },\n      params: {\n        lang: lang\n      },\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(function (response) {\n      Places(lang, token, dispatch);\n      Toast.show({\n        text: response.data.message,\n        type: response.data.success ? \"success\" : \"danger\",\n        duration: 3000,\n        textStyle: {\n          color: \"white\",\n          fontFamily: 'flatRegular',\n          textAlign: 'center'\n        }\n      });\n    });\n  };\n};\nexport var addPlace = function addPlace(lang, latitude, longitude, address, name, token, navigation) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'add-place',\n              method: 'POST',\n              data: {\n                latitude: latitude,\n                longitude: longitude,\n                address: address,\n                name: name\n              },\n              params: {\n                lang: lang\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              if (response.data.success) navigation.navigate('newLocation');\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var editPlace = function editPlace(lang, id, latitude, longitude, address, name, token, navigation) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'update-place',\n              method: 'POST',\n              data: {\n                latitude: latitude,\n                longitude: longitude,\n                address: address,\n                name: name,\n                id: id\n              },\n              params: {\n                lang: lang\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              if (response.data.success) navigation.navigate('newLocation');\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar Places = function Places(lang, token, dispatch) {\n  axios({\n    url: CONST.url + 'places',\n    method: 'POST',\n    params: {\n      lang: lang\n    },\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  }).then(function (response) {\n    dispatch({\n      type: 'getPlaces',\n      payload: response.data\n    });\n  });\n};","map":{"version":3,"sources":["/Users/ahmedtaha/Documents/work/react/amany/Archive/src/actions/PlacesAction.js"],"names":["axios","CONST","Toast","getPlaces","lang","token","dispatch","Places","deletePlace","id","url","method","data","params","headers","Authorization","then","response","show","text","message","type","success","duration","textStyle","color","fontFamily","textAlign","addPlace","latitude","longitude","address","name","navigation","navigate","editPlace","payload"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport CONST from \"../consts\";\nimport {Toast} from \"native-base\";\n\n\n\nexport const getPlaces = (lang , token) => {\n    return (dispatch) => {\n        Places(lang, token, dispatch)\n    }\n};\n\n\n\nexport const deletePlace = (lang , id , token ) => {\n    return (dispatch) => {\n        axios({\n            url         : CONST.url + 'delete-place',\n            method      : 'POST',\n            data        : {id},\n            params      : { lang },\n            headers     : {Authorization: 'Bearer ' + token}\n        }).then(response => {\n            Places(lang , token , dispatch);\n            Toast.show({\n                text        : response.data.message,\n                type        : response.data.success ? \"success\" : \"danger\",\n                duration    : 3000,\n                textStyle   : {\n                    color       : \"white\",\n                    fontFamily  : 'flatRegular',\n                    textAlign   : 'center'\n                }\n            });\n        });\n\n    }\n};\n\n\nexport const addPlace = (lang , latitude, longitude, address, name , token, navigation ) => {\n    return async (dispatch) => {\n        await axios({\n            url         : CONST.url + 'add-place',\n            method      : 'POST',\n            data        : {latitude, longitude, address, name},\n            params      : { lang },\n            headers     : {Authorization: 'Bearer ' + token}\n        }).then(response => {\n            if (response.data.success)\n                navigation.navigate('newLocation')\n\n            Toast.show({\n                text        : response.data.message,\n                type        : response.data.success ? \"success\" : \"danger\",\n                duration    : 3000,\n                textStyle   : {\n                    color       : \"white\",\n                    fontFamily  : 'flatRegular',\n                    textAlign   : 'center'\n                }\n            });\n        });\n\n    }\n};\n\nexport const editPlace = (lang , id, latitude, longitude, address, name , token, navigation ) => {\n    return async (dispatch) => {\n        await axios({\n            url         : CONST.url + 'update-place',\n            method      : 'POST',\n            data        : {latitude, longitude, address, name, id},\n            params      : { lang },\n            headers     : {Authorization: 'Bearer ' + token}\n        }).then(response => {\n            if (response.data.success)\n                navigation.navigate('newLocation')\n\n            Toast.show({\n                text        : response.data.message,\n                type        : response.data.success ? \"success\" : \"danger\",\n                duration    : 3000,\n                textStyle   : {\n                    color       : \"white\",\n                    fontFamily  : 'flatRegular',\n                    textAlign   : 'center'\n                }\n            });\n        });\n\n    }\n};\n\n\nconst Places = (lang , token , dispatch ) => {\n    axios({\n        url         : CONST.url + 'places',\n        method      : 'POST',\n        params      : { lang },\n        headers     : {Authorization: 'Bearer ' + token}\n    }).then(response => {\n        dispatch({type: 'getPlaces', payload: response.data});\n    });\n};\n"]},"metadata":{},"sourceType":"module"}