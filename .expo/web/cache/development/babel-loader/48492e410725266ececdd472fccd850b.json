{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/ahmedtaha/Documents/work/react/amany/Archive/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport AppNavigator from \"./src/routes\";\nimport { Root } from \"native-base\";\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistedStore } from \"./src/store\";\nimport \"./ReactotronConfig\";\nimport * as Notifications from 'expo-notifications';\n\nfunction App(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setIsReady = _useState2[1];\n\n  useEffect(function () {\n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('orders', {\n        name: 'Chat messages',\n        importance: Notifications.AndroidImportance.HIGH,\n        sound: 'email-sound.wav'\n      });\n    }\n\n    function loadFont() {\n      return _regeneratorRuntime.async(function loadFont$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({\n                flatMedium: require(\"./assets/fonts/JF-Flat-medium.ttf\"),\n                flatRegular: require(\"./assets/fonts/JF-Flat-regular.ttf\"),\n                Roboto: require('native-base/Fonts/Roboto.ttf'),\n                Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf')\n              }, Ionicons.font)));\n\n            case 2:\n              setIsReady(true);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    loadFont();\n  }, [isReady]);\n\n  if (!isReady) {\n    return React.createElement(AppLoading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, React.createElement(PersistGate, {\n    persistor: persistedStore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, React.createElement(Root, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, React.createElement(AppNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ahmedtaha/Documents/work/react/amany/Archive/App.js"],"names":["React","useState","useEffect","StatusBar","AsyncStorage","AppLoading","Font","Ionicons","AppNavigator","Root","Provider","PersistGate","store","persistedStore","Notifications","App","navigation","isReady","setIsReady","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","HIGH","sound","loadFont","loadAsync","flatMedium","require","flatRegular","Roboto","Roboto_medium","font"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,iBAA1B;SACSC,Y;AACT,SAASC,UAAT,QAA2B,MAA3B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,YAAP;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,KAAT,EAAgBC,cAAhB;AACA;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;;AAEA,SAASC,GAAT,OAA2B;AAAA,MAAbC,UAAa,QAAbA,UAAa;;AAAA,kBAEKf,QAAQ,CAAC,KAAD,CAFb;AAAA;AAAA,MAElBgB,OAFkB;AAAA,MAETC,UAFS;;AAIzBhB,EAAAA,SAAS,CAAE,YAAM;AAKf,QAAIiB,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAM7BN,MAAAA,aAAa,CAACO,2BAAd,CAA0C,QAA1C,EAAoD;AAClDC,QAAAA,IAAI,EAAE,eAD4C;AAElDC,QAAAA,UAAU,EAAET,aAAa,CAACU,iBAAd,CAAgCC,IAFM;AAGlDC,QAAAA,KAAK,EAAE;AAH2C,OAApD;AAKD;;AAED,aAAeC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACQrB,IAAI,CAACsB,SAAL;AACJC,gBAAAA,UAAU,EAAUC,OAAO,qCADvB;AAEJC,gBAAAA,WAAW,EAASD,OAAO,sCAFvB;AAGJE,gBAAAA,MAAM,EAAcF,OAAO,CAAC,8BAAD,CAHvB;AAIJG,gBAAAA,aAAa,EAAOH,OAAO,CAAC,qCAAD;AAJvB,iBAKDvB,QAAQ,CAAC2B,IALR,EADR;;AAAA;AAQEhB,cAAAA,UAAU,CAAC,IAAD,CAAV;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWAS,IAAAA,QAAQ;AAET,GA/BQ,EA+BN,CAACV,OAAD,CA/BM,CAAT;;AAiCA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEL,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEC,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF,CADJ;AAUD;;AAED,eAAeE,GAAf","sourcesContent":["import React , {useState , useEffect} from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { AsyncStorage } from 'react-native';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport AppNavigator from './src/routes';\nimport { Root } from \"native-base\";\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistedStore } from './src/store';\nimport './ReactotronConfig';\nimport * as Notifications from 'expo-notifications';\n\nfunction App({navigation}) {\n\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect( () => {\n\n    // I18nManager.forceRTL(true);\n    // AsyncStorage.clear();\n\n    if (Platform.OS === 'android') {\n      // Notifications.createChannelAndroidAsync('orders', {\n      //   name: 'Chat messages',\n      //   sound: true,\n      // });\n\n      Notifications.setNotificationChannelAsync('orders', {\n        name: 'Chat messages',\n        importance: Notifications.AndroidImportance.HIGH,\n        sound: 'email-sound.wav', // <- for Android 8.0+, see channelId property below\n      });\n    }\n\n    async function loadFont(){\n      await Font.loadAsync({\n        flatMedium        : require('./assets/fonts/JF-Flat-medium.ttf'),\n        flatRegular       : require('./assets/fonts/JF-Flat-regular.ttf'),\n        Roboto            : require('native-base/Fonts/Roboto.ttf'),\n        Roboto_medium     : require('native-base/Fonts/Roboto_medium.ttf'),\n        ...Ionicons.font,\n      });\n      setIsReady(true)\n    }\n\n    loadFont();\n\n  }, [isReady]);\n\n  if (!isReady) {\n    return <AppLoading />;\n  }\n\n  return (\n      <Provider store={store}>\n        <PersistGate persistor={persistedStore}>\n          <Root>\n            {/*<StatusBar style=\"auto\" />*/}\n            <AppNavigator />\n          </Root>\n        </PersistGate>\n      </Provider>\n  );\n}\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}