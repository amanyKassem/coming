{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport CONST from \"../consts\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nexport var getBanners = function getBanners(lang) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'banners',\n              method: 'GET',\n              params: {\n                lang: lang\n              }\n            }).then(function (response) {\n              dispatch({\n                type: 'getBanners',\n                payload: response.data\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/ahmedtaha/Documents/work/react/amany/Archive/src/actions/BannersAction.js"],"names":["axios","CONST","AsyncStorage","getBanners","lang","dispatch","url","method","params","then","response","type","payload","data"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP;SACQC,Y;AAGR,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAU;AAChC,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGL,KAAK,CAAC;AACRM,cAAAA,GAAG,EAAWL,KAAK,CAACK,GAAN,GAAY,SADlB;AAERC,cAAAA,MAAM,EAAQ,KAFN;AAGRC,cAAAA,MAAM,EAAQ;AAAEJ,gBAAAA,IAAI,EAAJA;AAAF;AAHN,aAAD,CAAL,CAIHK,IAJG,CAIE,UAAAC,QAAQ,EAAI;AAChBL,cAAAA,QAAQ,CAAC;AAACM,gBAAAA,IAAI,EAAE,YAAP;AAAqBC,gBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAvC,eAAD,CAAR;AACH,aANK,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASH,CAVM","sourcesContent":["import axios from \"axios\";\nimport CONST from \"../consts\";\nimport {AsyncStorage} from \"react-native\";\n\n\nexport const getBanners = (lang) => {\n    return async (dispatch) => {\n        await axios({\n            url         : CONST.url + 'banners',\n            method      : 'GET',\n            params      : { lang },\n        }).then(response => {\n            dispatch({type: 'getBanners', payload: response.data});\n        });\n    }\n};\n\n"]},"metadata":{},"sourceType":"module"}