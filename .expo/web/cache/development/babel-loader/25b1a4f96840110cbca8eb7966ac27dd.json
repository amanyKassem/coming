{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { Toast } from 'native-base';\nimport CONST from \"../consts\";\nexport var getOffers = function getOffers(lang) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'offers',\n              method: 'GET',\n              params: {\n                lang: lang\n              }\n            }).then(function (response) {\n              dispatch({\n                type: 'getOffers',\n                payload: response.data\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getOfferProvider = function getOfferProvider(lang, id) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'offers-providers',\n              method: 'POST',\n              params: {\n                lang: lang\n              },\n              data: {\n                id: id\n              }\n            }).then(function (response) {\n              dispatch({\n                type: 'getOfferProvider',\n                payload: response.data\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/ahmedtaha/Documents/work/react/amany/Archive/src/actions/OffersAction.js"],"names":["axios","AsyncStorage","Toast","CONST","getOffers","lang","dispatch","url","method","params","then","response","type","payload","data","getOfferProvider","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;SACSC,Y;AACT,SAASC,KAAT,QAAsB,aAAtB;AACA,OAAOC,KAAP;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAU;AAC/B,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACEN,KAAK,CAAC;AACPO,cAAAA,GAAG,EAAWJ,KAAK,CAACI,GAAN,GAAY,QADnB;AAEPC,cAAAA,MAAM,EAAQ,KAFP;AAGPC,cAAAA,MAAM,EAAQ;AAACJ,gBAAAA,IAAI,EAAJA;AAAD;AAHP,aAAD,CAAL,CAIFK,IAJE,CAIG,UAAAC,QAAQ,EAAI;AAChBL,cAAAA,QAAQ,CAAC;AAACM,gBAAAA,IAAI,EAAE,WAAP;AAAoBC,gBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAtC,eAAD,CAAR;AACH,aANI,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASH,CAVM;AAWP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACV,IAAD,EAAQW,EAAR,EAAe;AAC3C,SAAO,kBAAOV,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACEN,KAAK,CAAC;AACPO,cAAAA,GAAG,EAAWJ,KAAK,CAACI,GAAN,GAAY,kBADnB;AAEPC,cAAAA,MAAM,EAAQ,MAFP;AAGPC,cAAAA,MAAM,EAAQ;AAACJ,gBAAAA,IAAI,EAAJA;AAAD,eAHP;AAIPS,cAAAA,IAAI,EAAU;AAACE,gBAAAA,EAAE,EAAFA;AAAD;AAJP,aAAD,CAAL,CAKFN,IALE,CAKG,UAAAC,QAAQ,EAAI;AAChBL,cAAAA,QAAQ,CAAC;AAACM,gBAAAA,IAAI,EAAE,kBAAP;AAA2BC,gBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAA7C,eAAD,CAAR;AACH,aAPI,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAUH,CAXM","sourcesContent":["import axios from 'axios';\nimport { AsyncStorage } from 'react-native';\nimport { Toast } from 'native-base'\nimport CONST from '../consts';\n\n\nexport const getOffers = (lang) => {\n    return async (dispatch) => {\n       await axios({\n            url         : CONST.url + 'offers',\n            method      : 'GET',\n            params      : {lang},\n        }).then(response => {\n            dispatch({type: 'getOffers', payload: response.data});\n        });\n    }\n};\nexport const getOfferProvider = (lang , id) => {\n    return async (dispatch) => {\n       await axios({\n            url         : CONST.url + 'offers-providers',\n            method      : 'POST',\n            params      : {lang},\n            data        : {id},\n        }).then(response => {\n            dispatch({type: 'getOfferProvider', payload: response.data});\n        });\n    }\n};"]},"metadata":{},"sourceType":"module"}