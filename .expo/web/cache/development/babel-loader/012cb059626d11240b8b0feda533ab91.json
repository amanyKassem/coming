{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport CONST from \"../consts\";\nimport { Toast } from \"native-base\";\nexport var getCategories = function getCategories(lang) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'categories',\n              method: 'GET',\n              params: {\n                lang: lang\n              }\n            }).then(function (response) {\n              dispatch({\n                type: 'getCategories',\n                payload: response.data\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getProviders = function getProviders(lang, category_id, rate, latitude, longitude, name) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'providers',\n              method: 'POST',\n              params: {\n                lang: lang\n              },\n              data: {\n                category_id: category_id,\n                rate: rate,\n                latitude: latitude,\n                longitude: longitude,\n                name: name\n              }\n            }).then(function (response) {\n              dispatch({\n                type: 'getProviders',\n                payload: response.data\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getProvidersEvents = function getProvidersEvents(lang, rate, latitude, longitude, name) {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'provider-events',\n              method: 'POST',\n              params: {\n                lang: lang\n              },\n              data: {\n                rate: rate,\n                latitude: latitude,\n                longitude: longitude,\n                name: name\n              }\n            }).then(function (response) {\n              dispatch({\n                type: 'getProvidersEvents',\n                payload: response.data\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getProviderDetails = function getProviderDetails(lang, id) {\n  return function (dispatch) {\n    axios({\n      url: CONST.url + 'provider-details',\n      method: 'POST',\n      params: {\n        lang: lang\n      },\n      data: {\n        id: id\n      }\n    }).then(function (response) {\n      dispatch({\n        type: 'getProviderDetails',\n        payload: response.data\n      });\n    });\n  };\n};\nexport var getEvents = function getEvents(lang, id, token) {\n  return function (dispatch) {\n    axios({\n      url: CONST.url + 'events',\n      method: 'POST',\n      params: {\n        lang: lang\n      },\n      data: {\n        id: id\n      },\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(function (response) {\n      dispatch({\n        type: 'getEvents',\n        payload: response.data\n      });\n    });\n  };\n};\nexport var getEvent = function getEvent(lang, id, token) {\n  return function (dispatch) {\n    axios({\n      url: CONST.url + 'event-details',\n      method: 'POST',\n      params: {\n        lang: lang\n      },\n      data: {\n        id: id\n      },\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(function (response) {\n      dispatch({\n        type: 'getEvent',\n        payload: response.data\n      });\n    });\n  };\n};\nexport var sendSpecialOrder = function sendSpecialOrder(lang, details, provider_id, latitude, longitude, address, payment_type, shipping_price, time, token, navigation) {\n  return function _callee4(dispatch) {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'POST',\n              url: CONST.url + 'send-special-order',\n              params: {\n                lang: lang\n              },\n              data: {\n                details: details,\n                provider_id: provider_id,\n                latitude: latitude,\n                longitude: longitude,\n                address: address,\n                payment_type: payment_type,\n                shipping_price: shipping_price,\n                time: time\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              if (response.data.success) {\n                navigation.navigate('orderSentSuccessfully');\n              }\n\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var sendEventSubscripe = function sendEventSubscripe(lang, event_id, payment_type, token, navigation) {\n  return function _callee5(dispatch) {\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'POST',\n              url: CONST.url + 'subscripe-event',\n              params: {\n                lang: lang\n              },\n              data: {\n                event_id: event_id,\n                payment_type: payment_type\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              if (response.data.success) {\n                navigation.navigate('eventSentSuccessfully');\n              }\n\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/ahmedtaha/Documents/work/react/amany/Archive/src/actions/CategoriesAction.js"],"names":["axios","CONST","Toast","getCategories","lang","dispatch","url","method","params","then","response","type","payload","data","getProviders","category_id","rate","latitude","longitude","name","getProvidersEvents","getProviderDetails","id","getEvents","token","headers","Authorization","getEvent","sendSpecialOrder","details","provider_id","address","payment_type","shipping_price","time","navigation","success","navigate","show","text","message","duration","textStyle","color","fontFamily","textAlign","sendEventSubscripe","event_id"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport CONST from \"../consts\";\nimport {Toast} from \"native-base\";\n\n\nexport const getCategories = (lang) => {\n    return async (dispatch) => {\n        await axios({\n            url         : CONST.url + 'categories',\n            method      : 'GET',\n            params      : { lang },\n        }).then(response => {\n            dispatch({type: 'getCategories', payload: response.data});\n        });\n    }\n};\n\nexport const getProviders = (lang , category_id , rate , latitude , longitude , name) => {\n    return async (dispatch) => {\n        await axios({\n            url         : CONST.url + 'providers',\n            method      : 'POST',\n            params      : { lang},\n            data        : { category_id , rate , latitude , longitude , name}\n        }).then(response => {\n            dispatch({type: 'getProviders', payload: response.data});\n        });\n    }\n};\n\n\n\nexport const getProvidersEvents = (lang  , rate , latitude , longitude , name) => {\n    return async (dispatch) => {\n        await axios({\n            url         : CONST.url + 'provider-events',\n            method      : 'POST',\n            params      : { lang},\n            data        : { rate , latitude , longitude , name}\n        }).then(response => {\n            dispatch({type: 'getProvidersEvents', payload: response.data});\n        });\n    }\n};\n\n\nexport const getProviderDetails = (lang , id) => {\n    return (dispatch) => {\n        axios({\n            url         : CONST.url + 'provider-details',\n            method      : 'POST',\n            params      : { lang },\n            data        : { id }\n        }).then(response => {\n            dispatch({type: 'getProviderDetails', payload: response.data});\n        });\n    }\n};\n\nexport const getEvents = (lang , id , token) => {\n    return (dispatch) => {\n        axios({\n            url         : CONST.url + 'events',\n            method      : 'POST',\n            params      : { lang },\n            data        : { id },\n            headers     : {Authorization: 'Bearer ' + token}\n        }).then(response => {\n            dispatch({type: 'getEvents', payload: response.data});\n        });\n    }\n};\nexport const getEvent = (lang , id , token) => {\n    return (dispatch) => {\n        axios({\n            url         : CONST.url + 'event-details',\n            method      : 'POST',\n            params      : { lang },\n            data        : { id },\n            headers     : {Authorization: 'Bearer ' + token}\n        }).then(response => {\n            dispatch({type: 'getEvent', payload: response.data});\n        });\n    }\n};\n\nexport const sendSpecialOrder = ( lang, details , provider_id, latitude , longitude , address , payment_type , shipping_price , time, token , navigation) => {\n    return async (dispatch,) => {\n\n\n        await axios({\n            method      : 'POST',\n            url         : CONST.url + 'send-special-order',\n            params      : {lang},\n            data        : {details , provider_id, latitude , longitude , address , payment_type , shipping_price , time},\n            headers     : {Authorization: 'Bearer ' + token}\n\n        }).then(response => {\n\n            if (response.data.success){\n                navigation.navigate('orderSentSuccessfully');\n            }\n\n            Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                    color: \"white\",\n                    fontFamily: 'flatRegular',\n                    textAlign: 'center'\n                }\n            });\n        })\n\n    }\n}\n\n\nexport const sendEventSubscripe = ( lang, event_id , payment_type , token , navigation) => {\n    return async (dispatch,) => {\n\n\n        await axios({\n            method      : 'POST',\n            url         : CONST.url + 'subscripe-event',\n            params      : {lang},\n            data        : {event_id , payment_type},\n            headers     : {Authorization: 'Bearer ' + token}\n\n        }).then(response => {\n\n            if (response.data.success){\n                navigation.navigate('eventSentSuccessfully');\n            }\n\n            Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                    color: \"white\",\n                    fontFamily: 'flatRegular',\n                    textAlign: 'center'\n                }\n            });\n        })\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}