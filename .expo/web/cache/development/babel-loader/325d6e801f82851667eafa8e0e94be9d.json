{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/ahmedtaha/Documents/work/react/amany/Archive/src/components/GetLocation.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Container, Content, Form, Input } from 'native-base';\nimport * as Permissions from 'expo-permissions';\nimport * as Location from 'expo-location';\nimport axios from \"axios\";\nimport MapView from 'react-native-maps';\nimport Header from \"../common/Header\";\nimport COLORS from \"../consts/colors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styles from \"../../assets/styles\";\nimport i18n from \"../../locale/i18n\";\nvar latitudeDelta = 0.922;\nvar longitudeDelta = 0.521;\nvar isIOS = Platform.OS === 'ios';\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width;\n\nvar _Dimensions$get2 = Dimensions.get('window'),\n    height = _Dimensions$get2.height;\n\nfunction GetLocation(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var pathName = route.params ? route.params.pathName : null;\n  var mapRef = useRef(null);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      city = _useState2[0],\n      setCity = _useState2[1];\n\n  var _useState3 = useState({\n    latitude: '',\n    longitude: '',\n    latitudeDelta: latitudeDelta,\n    longitudeDelta: longitudeDelta\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mapRegion = _useState4[0],\n      setMapRegion = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      initMap = _useState6[0],\n      setInitMap = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showAddress = _useState8[0],\n      setShowAddress = _useState8[1];\n\n  var fetchData = function fetchData() {\n    var _await$Permissions$as, status, userLocation, _await$Location$getCu, _await$Location$getCu2, latitude, longitude, getCity, _await$axios$get, data;\n\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n          case 2:\n            _await$Permissions$as = _context.sent;\n            status = _await$Permissions$as.status;\n            userLocation = {};\n\n            if (!(status !== 'granted')) {\n              _context.next = 9;\n              break;\n            }\n\n            alert('صلاحيات تحديد موقعك الحالي ملغاه');\n            _context.next = 19;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n          case 11:\n            _await$Location$getCu = _context.sent;\n            _await$Location$getCu2 = _await$Location$getCu.coords;\n            latitude = _await$Location$getCu2.latitude;\n            longitude = _await$Location$getCu2.longitude;\n\n            if (route.params && route.params.latitude) {\n              userLocation = {\n                latitude: route.params.latitude,\n                longitude: route.params.longitude,\n                latitudeDelta: latitudeDelta,\n                longitudeDelta: longitudeDelta\n              };\n            } else {\n              userLocation = {\n                latitude: latitude,\n                longitude: longitude,\n                latitudeDelta: latitudeDelta,\n                longitudeDelta: longitudeDelta\n              };\n            }\n\n            setInitMap(false);\n            setMapRegion(userLocation);\n            isIOS ? mapRef.current.animateToRegion(userLocation, 1000) : false;\n\n          case 19:\n            getCity = 'https://maps.googleapis.com/maps/api/geocode/json?latlng=';\n            getCity += userLocation.latitude + ',' + userLocation.longitude;\n            getCity += '&key=AIzaSyCJTSwkdcdRpIXp2yG7DfSRKFWxKhQdYhQ&language=ar&sensor=true';\n            console.log(\"getCity  \", getCity);\n            _context.prev = 23;\n            _context.next = 26;\n            return _regeneratorRuntime.awrap(axios.get(getCity));\n\n          case 26:\n            _await$axios$get = _context.sent;\n            data = _await$axios$get.data;\n            setCity(data.results[0].formatted_address);\n            _context.next = 34;\n            break;\n\n          case 31:\n            _context.prev = 31;\n            _context.t0 = _context[\"catch\"](23);\n            console.log(_context.t0);\n\n          case 34:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[23, 31]], Promise);\n  };\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    fetchData();\n  }, [route.params]);\n\n  var _handleMapRegionChange = function _handleMapRegionChange(mapCoordinate) {\n    var getCity, _await$axios$get2, data;\n\n    return _regeneratorRuntime.async(function _handleMapRegionChange$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setShowAddress(true);\n            setMapRegion({\n              latitude: mapCoordinate.latitude,\n              longitude: mapCoordinate.longitude,\n              latitudeDelta: latitudeDelta,\n              longitudeDelta: longitudeDelta\n            });\n            getCity = 'https://maps.googleapis.com/maps/api/geocode/json?latlng=';\n            getCity += mapCoordinate.latitude + ',' + mapCoordinate.longitude;\n            getCity += '&key=AIzaSyCJTSwkdcdRpIXp2yG7DfSRKFWxKhQdYhQ&language=ar&sensor=true';\n            console.log('locations data', getCity);\n            _context2.prev = 6;\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(axios.get(getCity));\n\n          case 9:\n            _await$axios$get2 = _context2.sent;\n            data = _await$axios$get2.data;\n            setCity(data.results[0].formatted_address);\n            _context2.next = 17;\n            break;\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](6);\n            console.log(_context2.t0);\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[6, 14]], Promise);\n  };\n\n  function getLoc() {\n    console.log(\"mapRegion button\", mapRegion);\n    console.log(\"city3 \", city);\n    navigation.navigate(pathName, {\n      cityName: city,\n      mapRegion: mapRegion,\n      pathName: 'getLoc'\n    });\n  }\n\n  return React.createElement(Container, {\n    style: [styles.bg_gray],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, React.createElement(Content, {\n    contentContainerStyle: [styles.bgFullWidth, styles.bg_gray],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, React.createElement(Header, {\n    navigation: navigation,\n    title: pathName === 'orderDetails' ? i18n.t('seeLocation') : i18n.t('selectUrLoc'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: {\n      flex: 1,\n      height: height - 80,\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, !initMap && mapRegion.latitude != null ? React.createElement(MapView, {\n    ref: mapRef,\n    style: {\n      width: '100%',\n      height: '100%',\n      flex: 1\n    },\n    initialRegion: mapRegion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }, React.createElement(MapView.Marker, {\n    draggable: pathName !== 'orderDetails',\n    coordinate: mapRegion,\n    onDragEnd: function onDragEnd(e) {\n      return _handleMapRegionChange(e.nativeEvent.coordinate);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 33\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../assets/images/blue_circle.png\"),\n    resizeMode: 'contain',\n    style: {\n      width: 35,\n      height: 35\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 37\n    }\n  }))) : React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 30\n    }\n  }), pathName !== 'orderDetails' ? React.createElement(View, {\n    style: [{\n      position: 'absolute',\n      bottom: 70,\n      alignSelf: 'center',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '100%'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return getLoc();\n    },\n    style: [styles.mstrdaBtn, styles.SelfCenter, styles.Width_80],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 33\n    }\n  }, React.createElement(Text, {\n    style: [styles.textBold, styles.text_White, styles.textSize_14],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 37\n    }\n  }, i18n.t('select')))) : null)));\n}\n\nexport default GetLocation;","map":{"version":3,"sources":["/Users/ahmedtaha/Documents/work/react/amany/Archive/src/components/GetLocation.js"],"names":["React","useState","useEffect","useRef","Container","Content","Form","Input","Permissions","Location","axios","MapView","Header","COLORS","useDispatch","useSelector","styles","i18n","latitudeDelta","longitudeDelta","isIOS","Platform","OS","Dimensions","get","width","height","GetLocation","navigation","route","pathName","params","mapRef","city","setCity","latitude","longitude","mapRegion","setMapRegion","initMap","setInitMap","showAddress","setShowAddress","fetchData","askAsync","LOCATION","status","userLocation","alert","getCurrentPositionAsync","coords","current","animateToRegion","getCity","console","log","data","results","formatted_address","dispatch","_handleMapRegionChange","mapCoordinate","getLoc","navigate","cityName","bg_gray","bgFullWidth","t","flex","e","nativeEvent","coordinate","require","position","bottom","alignSelf","justifyContent","alignItems","mstrdaBtn","SelfCenter","Width_80","textBold","text_White","textSize_14"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { View, Text, Image, TouchableOpacity, Switch, ScrollView, Dimensions } from \"react-native\";\nimport { Container, Content, Form, Input, } from 'native-base'\nimport * as Permissions from 'expo-permissions';\nimport * as Location from 'expo-location';\nimport axios from \"axios\";\nimport MapView from 'react-native-maps';\nimport Header from '../common/Header';\nimport COLORS from \"../consts/colors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styles from '../../assets/styles'\nimport i18n from \"../../locale/i18n\";\n\nconst latitudeDelta = 0.922;\nconst longitudeDelta = 0.521;\nconst isIOS      = Platform.OS === 'ios';\nconst { width }  = Dimensions.get('window')\nconst { height } = Dimensions.get('window')\n\nfunction GetLocation({ navigation, route }) {\n    // const token = useSelector(state => state.Auth.user ?state.Auth.user.data.token : null)\n    let pathName = route.params ? route.params.pathName : null;\n\n    let mapRef                      = useRef(null);\n    const [city, setCity]           = useState('');\n    const [mapRegion, setMapRegion] = useState({\n        latitude: '',\n        longitude: '',\n        latitudeDelta,\n        longitudeDelta\n    });\n\n    const [initMap, setInitMap] = useState(true);\n    const [showAddress, setShowAddress] = useState(false);\n\n    const fetchData = async () => {\n        let { status } = await Permissions.askAsync(Permissions.LOCATION);\n        let userLocation = {};\n        if (status !== 'granted') {\n            alert('صلاحيات تحديد موقعك الحالي ملغاه');\n        } else {\n            const { coords: { latitude, longitude } } = await Location.getCurrentPositionAsync({});\n\n            if (route.params && route.params.latitude){\n                userLocation = { latitude: route.params.latitude, longitude:route.params.longitude , latitudeDelta , longitudeDelta};\n            } else {\n                userLocation = { latitude, longitude , latitudeDelta , longitudeDelta};\n            }\n\n            setInitMap(false);\n            setMapRegion(userLocation);\n            isIOS ? mapRef.current.animateToRegion(userLocation, 1000) : false;\n        }\n        let getCity = 'https://maps.googleapis.com/maps/api/geocode/json?latlng=';\n        getCity += userLocation.latitude + ',' + userLocation.longitude;\n        getCity += '&key=AIzaSyCJTSwkdcdRpIXp2yG7DfSRKFWxKhQdYhQ&language=ar&sensor=true';\n        console.log(\"getCity  \", getCity)\n        // ReactotronConfig.log(getCity);\n        try {\n            const { data } = await axios.get(getCity);\n            setCity(data.results[0].formatted_address)\n            // console.log(\"city  \" , data.results[0].formatted_address)\n            // console.log(\"city  \" , city)\n        } catch (e) {\n            console.log(e);\n        }\n    };\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        fetchData();\n    }, [route.params]);\n\n\n\n    const _handleMapRegionChange = async (mapCoordinate) => {\n        setShowAddress(true)\n        setMapRegion({ latitude: mapCoordinate.latitude, longitude: mapCoordinate.longitude, latitudeDelta, longitudeDelta });\n\n        let getCity = 'https://maps.googleapis.com/maps/api/geocode/json?latlng=';\n        getCity += mapCoordinate.latitude + ',' + mapCoordinate.longitude;\n        getCity += '&key=AIzaSyCJTSwkdcdRpIXp2yG7DfSRKFWxKhQdYhQ&language=ar&sensor=true';\n\n        console.log('locations data', getCity);\n\n        try {\n            const { data } = await axios.get(getCity);\n            setCity(data.results[0].formatted_address)\n\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    function getLoc() {\n        console.log(\"mapRegion button\", mapRegion);\n        console.log(\"city3 \", city);\n\n        navigation.navigate(pathName, { cityName: city, mapRegion, pathName: 'getLoc' })\n\n\n    }\n\n    return (\n        <Container style={[styles.bg_gray]}>\n            <Content contentContainerStyle={[styles.bgFullWidth , styles.bg_gray]}>\n\n                <Header navigation={navigation} title={ pathName === 'orderDetails' ? i18n.t('seeLocation') : i18n.t('selectUrLoc')} />\n\n                <View style={{ flex: 1 , height : height-80, width: '100%'}}>\n                    {\n                        !initMap && mapRegion.latitude != null ? (\n                            <MapView\n                                ref={mapRef}\n                                style={{ width: '100%', height: '100%', flex: 1 }}\n                                initialRegion={mapRegion}>\n                                <MapView.Marker\n                                    draggable={pathName !==  'orderDetails'}\n                                    coordinate={mapRegion}\n                                    onDragEnd={(e) => _handleMapRegionChange(e.nativeEvent.coordinate)}\n                                >\n                                    <Image source={require('../../assets/images/blue_circle.png')} resizeMode={'contain'} style={{ width: 35, height: 35 }} />\n                                </MapView.Marker>\n                            </MapView>\n                        ) : (<View />)\n                    }\n\n                    {\n                        pathName !== 'orderDetails'?\n\n                            <View style={[{ position: 'absolute', bottom: 70, alignSelf: 'center', justifyContent: 'center', alignItems: 'center', width: '100%' }]}>\n\n                                <TouchableOpacity onPress={() => getLoc()} style={[styles.mstrdaBtn , styles.SelfCenter , styles.Width_80 ]}>\n                                    <Text style={[styles.textBold , styles.text_White , styles.textSize_14]}>{ i18n.t('select') }</Text>\n                                </TouchableOpacity>\n\n                            </View>\n\n                            :\n                            null\n\n                    }\n\n\n                </View>\n            </Content>\n        </Container>\n    );\n}\n\nexport default GetLocation;\n\n\n"]},"metadata":{},"sourceType":"module"}