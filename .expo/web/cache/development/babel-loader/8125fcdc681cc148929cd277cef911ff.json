{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { Toast } from 'native-base';\nimport CONST from \"../consts\";\nexport var getCart = function getCart(lang) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('deviceID').then(function (device_id) {\n              axios({\n                url: CONST.url + 'cart',\n                method: 'POST',\n                params: {\n                  lang: lang\n                },\n                data: {\n                  device_id: device_id\n                }\n              }).then(function (response) {\n                dispatch({\n                  type: 'getCart',\n                  payload: response.data\n                });\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getCartCount = function getCartCount(lang, token) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('deviceID').then(function (device_id) {\n              axios({\n                url: CONST.url + 'cart-count',\n                method: 'POST',\n                params: {\n                  lang: lang\n                },\n                data: {\n                  device_id: device_id\n                },\n                headers: {\n                  Authorization: 'Bearer ' + token\n                }\n              }).then(function (response) {\n                dispatch({\n                  type: 'getCartCount',\n                  payload: response.data\n                });\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getCartDetails = function getCartDetails(lang, id, coupon, token) {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('deviceID').then(function (device_id) {\n              axios({\n                url: CONST.url + 'cart-details',\n                method: 'POST',\n                params: {\n                  lang: lang\n                },\n                data: {\n                  id: id,\n                  coupon: coupon,\n                  device_id: device_id\n                },\n                headers: {\n                  Authorization: 'Bearer ' + token\n                }\n              }).then(function (response) {\n                dispatch({\n                  type: 'getCartDetails',\n                  payload: response.data\n                });\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addToCart = function addToCart(lang, product_id, quantity, price, extras, token, navigation, orderTime) {\n  return function _callee4(dispatch) {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('deviceID').then(function (device_id) {\n              axios({\n                url: CONST.url + 'add-cart',\n                method: 'POST',\n                params: {\n                  lang: lang\n                },\n                data: {\n                  device_id: device_id,\n                  product_id: product_id,\n                  quantity: quantity,\n                  price: price,\n                  extras: extras\n                },\n                headers: {\n                  Authorization: 'Bearer ' + token\n                }\n              }).then(function (response) {\n                if (response.data.success && orderTime === 'now') {\n                  navigation.navigate('basket');\n                }\n\n                Toast.show({\n                  text: response.data.message,\n                  type: response.data.success ? \"success\" : \"danger\",\n                  duration: 3000,\n                  textStyle: {\n                    color: \"white\",\n                    fontFamily: 'flatRegular',\n                    textAlign: 'center'\n                  }\n                });\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var ChangeProductQuantity = function ChangeProductQuantity(type, cart_id, id, lang, token) {\n  return function _callee5(dispatch) {\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'POST',\n              url: CONST.url + 'change-quantity',\n              params: {\n                lang: lang\n              },\n              data: {\n                type: type,\n                cart_id: cart_id,\n                id: id\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var ValidationCoupon = function ValidationCoupon(coupon, lang, token) {\n  return function _callee6(dispatch) {\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'POST',\n              url: CONST.url + 'validate/coupon',\n              params: {\n                lang: lang\n              },\n              data: {\n                coupon: coupon\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              if (response.data.success) {\n                dispatch({\n                  type: 'ValidationCoupon',\n                  payload: response.data\n                });\n              }\n\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var deleteProduct = function deleteProduct(cart_id, id, lang, token, navigation) {\n  return function _callee7(dispatch) {\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'POST',\n              url: CONST.url + 'delete-cart-item',\n              params: {\n                lang: lang\n              },\n              data: {\n                cart_id: cart_id,\n                id: id\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              if (response.data.success && response.data.data.products.length == 0) {\n                navigation.navigate('basket');\n              }\n\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var sendOrder = function sendOrder(lang, provider_id, latitude, longitude, address, payment_type, shipping_price, coupon, time, token, navigation) {\n  return function _callee8(dispatch) {\n    return _regeneratorRuntime.async(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'POST',\n              url: CONST.url + 'send-order',\n              params: {\n                lang: lang\n              },\n              data: {\n                provider_id: provider_id,\n                latitude: latitude,\n                longitude: longitude,\n                address: address,\n                payment_type: payment_type,\n                shipping_price: shipping_price,\n                coupon: coupon,\n                time: time\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              if (response.data.success) {\n                navigation.navigate('orderSentSuccessfully');\n              }\n\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getDeliveryPrice = function getDeliveryPrice(lang, id, latitude, longitude, token) {\n  return function _callee9(dispatch) {\n    return _regeneratorRuntime.async(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'POST',\n              url: CONST.url + 'delivery-price',\n              params: {\n                lang: lang\n              },\n              data: {\n                id: id,\n                latitude: latitude,\n                longitude: longitude\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              if (response.data.success) {\n                dispatch({\n                  type: 'getDeliveryPrice',\n                  payload: response.data\n                });\n              }\n            }));\n\n          case 2:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/ahmedtaha/Documents/work/react/amany/Archive/src/actions/CartAction.js"],"names":["axios","AsyncStorage","Toast","CONST","getCart","lang","dispatch","getItem","then","device_id","url","method","params","data","response","type","payload","getCartCount","token","headers","Authorization","getCartDetails","id","coupon","addToCart","product_id","quantity","price","extras","navigation","orderTime","success","navigate","show","text","message","duration","textStyle","color","fontFamily","textAlign","ChangeProductQuantity","cart_id","ValidationCoupon","deleteProduct","products","length","sendOrder","provider_id","latitude","longitude","address","payment_type","shipping_price","time","getDeliveryPrice"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { AsyncStorage } from 'react-native';\nimport { Toast } from 'native-base'\nimport CONST from '../consts';\n\n\nexport const getCart = (lang) => {\n    return async (dispatch) => {\n        await AsyncStorage.getItem('deviceID').then(device_id => {\n            axios({\n                url         : CONST.url + 'cart',\n                method      : 'POST',\n                params      : {lang},\n                data        : { device_id }\n            }).then(response => {\n                dispatch({type: 'getCart', payload: response.data});\n            });\n        })\n\n    }\n};\n\n\n\nexport const getCartCount = (lang , token) => {\n    return async (dispatch) => {\n        await AsyncStorage.getItem('deviceID').then(device_id => {\n            axios({\n                url         : CONST.url + 'cart-count',\n                method      : 'POST',\n                params      : {lang},\n                data        : { device_id },\n                headers     : {Authorization: 'Bearer ' + token},\n            }).then(response => {\n                dispatch({type: 'getCartCount', payload: response.data});\n            });\n        })\n\n    }\n};\n\nexport const getCartDetails = (lang , id, coupon , token) => {\n    return async (dispatch) => {\n        await AsyncStorage.getItem('deviceID').then(device_id => {\n            axios({\n                url         : CONST.url + 'cart-details',\n                method      : 'POST',\n                params      : {lang},\n                data        : { id, coupon, device_id},\n                headers: {Authorization: 'Bearer ' + token}\n            }).then(response => {\n                dispatch({type: 'getCartDetails', payload: response.data});\n            });\n        })\n\n    }\n};\n\nexport const addToCart = (lang , product_id , quantity ,price ,extras , token , navigation , orderTime) => {\n    return async (dispatch) => {\n        await AsyncStorage.getItem('deviceID').then(device_id => {\n            axios({\n                url         : CONST.url + 'add-cart',\n                method      : 'POST',\n                params      : {lang},\n                data        : { device_id , product_id , quantity ,price ,extras},\n                headers     : {Authorization: 'Bearer ' + token}\n            }).then(response => {\n                if (response.data.success && orderTime === 'now'){\n                    navigation.navigate('basket');\n                }\n\n                Toast.show({\n                    text        \t: response.data.message,\n                    type\t\t\t: response.data.success ? \"success\" : \"danger\",\n                    duration    \t: 3000,\n                    textStyle   \t: {\n                        color       \t: \"white\",\n                        fontFamily  \t: 'flatRegular',\n                        textAlign   \t: 'center'\n                    }\n                });\n\n            });\n        })\n\n    }\n};\n\nexport const ChangeProductQuantity = (type, cart_id, id, lang, token) => {\n    return async (dispatch) => {\n        await axios({\n            method      : 'POST',\n            url         : CONST.url + 'change-quantity',\n            params      : {lang},\n            data        : { type, cart_id, id},\n            headers     : {Authorization: 'Bearer ' + token}\n\n        }).then(response => {\n            Toast.show({\n                text        \t: response.data.message,\n                type\t\t\t: response.data.success ? \"success\" : \"danger\",\n                duration    \t: 3000,\n                textStyle   \t: {\n                    color       \t: \"white\",\n                    fontFamily  \t: 'flatRegular',\n                    textAlign   \t: 'center'\n                }\n            });\n\n        });\n    }\n}\n\n\nexport const ValidationCoupon = (coupon, lang, token) => {\n    return async (dispatch) => {\n        await axios({\n            method: 'POST',\n            url: CONST.url + 'validate/coupon',\n            params      : {lang},\n            data        : {coupon},\n            headers     : {Authorization: 'Bearer ' + token}\n\n        }).then((response) => {\n            if (response.data.success) {\n                dispatch({type: 'ValidationCoupon', payload: response.data});\n            }\n\n            Toast.show({\n                text        \t: response.data.message,\n                type\t\t\t: response.data.success ? \"success\" : \"danger\",\n                duration    \t: 3000,\n                textStyle   \t: {\n                    color       \t: \"white\",\n                    fontFamily  \t: 'flatRegular',\n                    textAlign   \t: 'center'\n                }\n            });\n\n        })\n    }\n}\n\n\nexport const deleteProduct = (cart_id, id, lang, token , navigation) => {\n    return async (dispatch,) => {\n\n\n        await axios({\n            method      : 'POST',\n            url         : CONST.url + 'delete-cart-item',\n            params      : {lang},\n            data        : {cart_id, id},\n            headers     : {Authorization: 'Bearer ' + token}\n\n        }).then(response => {\n\n            if (response.data.success && (response.data.data.products).length == 0 ){\n                navigation.navigate('basket');\n            }\n\n            Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                    color: \"white\",\n                    fontFamily: 'flatRegular',\n                    textAlign: 'center'\n                }\n            });\n        })\n\n    }\n}\n\n\nexport const sendOrder = ( lang, provider_id, latitude , longitude , address , payment_type, shipping_price , coupon , time, token , navigation) => {\n    return async (dispatch,) => {\n\n\n        await axios({\n            method      : 'POST',\n            url         : CONST.url + 'send-order',\n            params      : {lang},\n            data        : {provider_id, latitude , longitude , address , payment_type , shipping_price , coupon, time},\n            headers     : {Authorization: 'Bearer ' + token}\n\n        }).then(response => {\n\n            if (response.data.success){\n                navigation.navigate('orderSentSuccessfully');\n            }\n\n            Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                    color: \"white\",\n                    fontFamily: 'flatRegular',\n                    textAlign: 'center'\n                }\n            });\n        })\n\n    }\n}\n\nexport const getDeliveryPrice = ( lang, id, latitude , longitude , token ) => {\n    return async (dispatch,) => {\n\n\n        await axios({\n            method      : 'POST',\n            url         : CONST.url + 'delivery-price',\n            params      : {lang},\n            data        : {id, latitude , longitude},\n            headers     : {Authorization: 'Bearer ' + token}\n\n        }).then(response => {\n\n            if (response.data.success) {\n                dispatch({type: 'getDeliveryPrice', payload: response.data});\n            }\n\n        })\n\n    }\n}"]},"metadata":{},"sourceType":"module"}