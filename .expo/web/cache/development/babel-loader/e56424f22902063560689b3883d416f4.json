{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport CONST from \"../consts\";\nimport { Toast } from \"native-base\";\nexport var getFavourites = function getFavourites(lang, token) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'my-favourite',\n              method: 'POST',\n              params: {\n                lang: lang\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              dispatch({\n                type: 'getFavourites',\n                payload: response.data\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var setFavourite = function setFavourite(lang, provider_id, token) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'favourite',\n              method: 'POST',\n              params: {\n                lang: lang\n              },\n              data: {\n                provider_id: provider_id\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/ahmedtaha/Documents/work/react/amany/Archive/src/actions/FavouritesAction.js"],"names":["axios","CONST","Toast","getFavourites","lang","token","dispatch","url","method","params","headers","Authorization","then","response","type","payload","data","setFavourite","provider_id","show","text","message","success","duration","textStyle","color","fontFamily","textAlign"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP;AACA,SAAQC,KAAR,QAAoB,aAApB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAQC,KAAR,EAAkB;AAC3C,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGN,KAAK,CAAC;AACRO,cAAAA,GAAG,EAAWN,KAAK,CAACM,GAAN,GAAY,cADlB;AAERC,cAAAA,MAAM,EAAQ,MAFN;AAGRC,cAAAA,MAAM,EAAQ;AAAEL,gBAAAA,IAAI,EAAJA;AAAF,eAHN;AAIRM,cAAAA,OAAO,EAAO;AAACC,gBAAAA,aAAa,EAAE,YAAYN;AAA5B;AAJN,aAAD,CAAL,CAKHO,IALG,CAKE,UAAAC,QAAQ,EAAI;AAChBP,cAAAA,QAAQ,CAAC;AAACQ,gBAAAA,IAAI,EAAE,eAAP;AAAwBC,gBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAA1C,eAAD,CAAR;AACH,aAPK,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAUH,CAXM;AAaP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACb,IAAD,EAAQc,WAAR,EAAsBb,KAAtB,EAAgC;AACxD,SAAO,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGN,KAAK,CAAC;AACRO,cAAAA,GAAG,EAAWN,KAAK,CAACM,GAAN,GAAY,WADlB;AAERC,cAAAA,MAAM,EAAQ,MAFN;AAGRC,cAAAA,MAAM,EAAQ;AAAEL,gBAAAA,IAAI,EAAJA;AAAF,eAHN;AAIRY,cAAAA,IAAI,EAAU;AAACE,gBAAAA,WAAW,EAAXA;AAAD,eAJN;AAKRR,cAAAA,OAAO,EAAO;AAACC,gBAAAA,aAAa,EAAE,YAAYN;AAA5B;AALN,aAAD,CAAL,CAMHO,IANG,CAME,UAAAC,QAAQ,EAAI;AAChBX,cAAAA,KAAK,CAACiB,IAAN,CAAW;AACPC,gBAAAA,IAAI,EAAEP,QAAQ,CAACG,IAAT,CAAcK,OADb;AAEPP,gBAAAA,IAAI,EAAED,QAAQ,CAACG,IAAT,CAAcM,OAAd,GAAwB,SAAxB,GAAoC,QAFnC;AAGPC,gBAAAA,QAAQ,EAAE,IAHH;AAIPC,gBAAAA,SAAS,EAAE;AACPC,kBAAAA,KAAK,EAAE,OADA;AAEPC,kBAAAA,UAAU,EAAE,aAFL;AAGPC,kBAAAA,SAAS,EAAE;AAHJ;AAJJ,eAAX;AAUH,aAjBK,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAoBH,CArBM","sourcesContent":["import axios from \"axios\";\nimport CONST from \"../consts\";\nimport {Toast} from \"native-base\";\n\nexport const getFavourites = (lang , token) => {\n    return async (dispatch) => {\n        await axios({\n            url         : CONST.url + 'my-favourite',\n            method      : 'POST',\n            params      : { lang },\n            headers     : {Authorization: 'Bearer ' + token}\n        }).then(response => {\n            dispatch({type: 'getFavourites', payload: response.data});\n        });\n    }\n};\n\nexport const setFavourite = (lang , provider_id , token) => {\n    return async (dispatch) => {\n        await axios({\n            url         : CONST.url + 'favourite',\n            method      : 'POST',\n            params      : { lang },\n            data        : {provider_id},\n            headers     : {Authorization: 'Bearer ' + token}\n        }).then(response => {\n            Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                    color: \"white\",\n                    fontFamily: 'flatRegular',\n                    textAlign: 'center'\n                }\n            });\n        });\n    }\n};\n\n"]},"metadata":{},"sourceType":"module"}