{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport CONST from \"../consts\";\nimport { Toast } from \"native-base\";\nexport var contactUs = function contactUs(lang, name, phone, message) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'contact-us',\n              method: 'POST',\n              params: {\n                lang: lang\n              },\n              data: {\n                name: name,\n                phone: phone,\n                message: message\n              }\n            }).then(function (response) {\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var sendComplaint = function sendComplaint(lang, username, email, subject, description, token) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: CONST.url + 'send-complaint',\n              method: 'POST',\n              params: {\n                lang: lang\n              },\n              data: {\n                username: username,\n                email: email,\n                subject: subject,\n                description: description\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            }).then(function (response) {\n              Toast.show({\n                text: response.data.message,\n                type: response.data.success ? \"success\" : \"danger\",\n                duration: 3000,\n                textStyle: {\n                  color: \"white\",\n                  fontFamily: 'flatRegular',\n                  textAlign: 'center'\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/ahmedtaha/Documents/work/react/amany/Archive/src/actions/ContactUsAction.js"],"names":["axios","CONST","Toast","contactUs","lang","name","phone","message","dispatch","url","method","params","data","then","response","show","text","type","success","duration","textStyle","color","fontFamily","textAlign","sendComplaint","username","email","subject","description","token","headers","Authorization"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP;AACA,SAAQC,KAAR,QAAoB,aAApB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAQC,IAAR,EAAeC,KAAf,EAAuBC,OAAvB,EAAmC;AACxD,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGR,KAAK,CAAC;AACRS,cAAAA,GAAG,EAAWR,KAAK,CAACQ,GAAN,GAAY,YADlB;AAERC,cAAAA,MAAM,EAAQ,MAFN;AAGRC,cAAAA,MAAM,EAAQ;AAAEP,gBAAAA,IAAI,EAAJA;AAAF,eAHN;AAIRQ,cAAAA,IAAI,EAAU;AAACP,gBAAAA,IAAI,EAAJA,IAAD;AAAQC,gBAAAA,KAAK,EAALA,KAAR;AAAgBC,gBAAAA,OAAO,EAAPA;AAAhB;AAJN,aAAD,CAAL,CAKHM,IALG,CAKE,UAAAC,QAAQ,EAAI;AAChBZ,cAAAA,KAAK,CAACa,IAAN,CAAW;AACPC,gBAAAA,IAAI,EAAUF,QAAQ,CAACF,IAAT,CAAcL,OADrB;AAEPU,gBAAAA,IAAI,EAAUH,QAAQ,CAACF,IAAT,CAAcM,OAAd,GAAwB,SAAxB,GAAoC,QAF3C;AAGPC,gBAAAA,QAAQ,EAAM,IAHP;AAIPC,gBAAAA,SAAS,EAAK;AACVC,kBAAAA,KAAK,EAAS,OADJ;AAEVC,kBAAAA,UAAU,EAAI,aAFJ;AAGVC,kBAAAA,SAAS,EAAK;AAHJ;AAJP,eAAX;AAUH,aAhBK,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAoBH,CArBM;AAuBP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACpB,IAAD,EAAQqB,QAAR,EAAmBC,KAAnB,EAA2BC,OAA3B,EAAqCC,WAArC,EAAmDC,KAAnD,EAA6D;AACtF,SAAO,kBAAOrB,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGR,KAAK,CAAC;AACRS,cAAAA,GAAG,EAAWR,KAAK,CAACQ,GAAN,GAAY,gBADlB;AAERC,cAAAA,MAAM,EAAQ,MAFN;AAGRC,cAAAA,MAAM,EAAQ;AAAEP,gBAAAA,IAAI,EAAJA;AAAF,eAHN;AAIRQ,cAAAA,IAAI,EAAU;AAAEa,gBAAAA,QAAQ,EAARA,QAAF;AAAaC,gBAAAA,KAAK,EAALA,KAAb;AAAqBC,gBAAAA,OAAO,EAAPA,OAArB;AAA+BC,gBAAAA,WAAW,EAAXA;AAA/B,eAJN;AAKRE,cAAAA,OAAO,EAAO;AAACC,gBAAAA,aAAa,EAAE,YAAYF;AAA5B;AALN,aAAD,CAAL,CAMHhB,IANG,CAME,UAAAC,QAAQ,EAAI;AAChBZ,cAAAA,KAAK,CAACa,IAAN,CAAW;AACPC,gBAAAA,IAAI,EAAUF,QAAQ,CAACF,IAAT,CAAcL,OADrB;AAEPU,gBAAAA,IAAI,EAAUH,QAAQ,CAACF,IAAT,CAAcM,OAAd,GAAwB,SAAxB,GAAoC,QAF3C;AAGPC,gBAAAA,QAAQ,EAAM,IAHP;AAIPC,gBAAAA,SAAS,EAAK;AACVC,kBAAAA,KAAK,EAAS,OADJ;AAEVC,kBAAAA,UAAU,EAAI,aAFJ;AAGVC,kBAAAA,SAAS,EAAK;AAHJ;AAJP,eAAX;AAUH,aAjBK,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAqBH,CAtBM","sourcesContent":["import axios from \"axios\";\nimport CONST from \"../consts\";\nimport {Toast} from \"native-base\";\n\nexport const contactUs = (lang , name , phone , message) => {\n    return async (dispatch) => {\n        await axios({\n            url         : CONST.url + 'contact-us',\n            method      : 'POST',\n            params      : { lang },\n            data        : {name , phone , message }\n        }).then(response => {\n            Toast.show({\n                text        : response.data.message,\n                type        : response.data.success ? \"success\" : \"danger\",\n                duration    : 3000,\n                textStyle   : {\n                    color       : \"white\",\n                    fontFamily  : 'flatRegular',\n                    textAlign   : 'center'\n                }\n            });\n        });\n\n    }\n};\n\nexport const sendComplaint = (lang , username , email , subject , description , token) => {\n    return async (dispatch) => {\n        await axios({\n            url         : CONST.url + 'send-complaint',\n            method      : 'POST',\n            params      : { lang },\n            data        : { username , email , subject , description },\n            headers     : {Authorization: 'Bearer ' + token}\n        }).then(response => {\n            Toast.show({\n                text        : response.data.message,\n                type        : response.data.success ? \"success\" : \"danger\",\n                duration    : 3000,\n                textStyle   : {\n                    color       : \"white\",\n                    fontFamily  : 'flatRegular',\n                    textAlign   : 'center'\n                }\n            });\n        });\n\n    }\n};"]},"metadata":{},"sourceType":"module"}