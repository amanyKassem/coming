{"ast":null,"code":"import axios from \"axios\";\nimport CONST from \"../consts\";\nimport { Toast } from \"native-base\";\nexport var getNotifications = function getNotifications(lang, token) {\n  return function (dispatch) {\n    Notifications(lang, token, dispatch);\n  };\n};\nexport var deleteNoti = function deleteNoti(lang, id, token) {\n  return function (dispatch) {\n    axios({\n      url: CONST.url + 'delete-notification',\n      method: 'POST',\n      data: {\n        id: id\n      },\n      params: {\n        lang: lang\n      },\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(function (response) {\n      Notifications(lang, token, dispatch);\n      Toast.show({\n        text: response.data.message,\n        type: response.data.success ? \"success\" : \"danger\",\n        duration: 3000,\n        textStyle: {\n          color: \"white\",\n          fontFamily: 'flatRegular',\n          textAlign: 'center'\n        }\n      });\n    });\n  };\n};\n\nvar Notifications = function Notifications(lang, token, dispatch) {\n  axios({\n    url: CONST.url + 'notifications',\n    method: 'GET',\n    params: {\n      lang: lang\n    },\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  }).then(function (response) {\n    dispatch({\n      type: 'getNotifications',\n      payload: response.data\n    });\n  });\n};\n\nexport var getNoti = function getNoti(lang, token) {\n  return function (dispatch) {\n    axios({\n      url: CONST.url + 'allow-notifications',\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + token\n      },\n      params: {\n        lang: lang\n      }\n    }).then(function (response) {\n      dispatch({\n        type: 'isNotify'\n      });\n      Toast.show({\n        text: response.data.message,\n        type: response.data.success ? \"success\" : \"danger\",\n        duration: 3000,\n        textStyle: {\n          color: \"white\",\n          fontFamily: 'flatRegular',\n          textAlign: 'center'\n        }\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/ahmedtaha/Documents/work/react/amany/Archive/src/actions/NotificationsAction.js"],"names":["axios","CONST","Toast","getNotifications","lang","token","dispatch","Notifications","deleteNoti","id","url","method","data","params","headers","Authorization","then","response","show","text","message","type","success","duration","textStyle","color","fontFamily","textAlign","payload","getNoti"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP;AACA,SAAQC,KAAR,QAAoB,aAApB;AAIA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAQC,KAAR,EAAkB;AAC9C,SAAO,UAACC,QAAD,EAAc;AACjBC,IAAAA,aAAa,CAACH,IAAD,EAAOC,KAAP,EAAcC,QAAd,CAAb;AACH,GAFD;AAGH,CAJM;AAQP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACJ,IAAD,EAAQK,EAAR,EAAaJ,KAAb,EAAwB;AAC9C,SAAO,UAACC,QAAD,EAAc;AACjBN,IAAAA,KAAK,CAAC;AACFU,MAAAA,GAAG,EAAWT,KAAK,CAACS,GAAN,GAAY,qBADxB;AAEFC,MAAAA,MAAM,EAAQ,MAFZ;AAGFC,MAAAA,IAAI,EAAU;AAACH,QAAAA,EAAE,EAAFA;AAAD,OAHZ;AAIFI,MAAAA,MAAM,EAAQ;AAAET,QAAAA,IAAI,EAAJA;AAAF,OAJZ;AAKFU,MAAAA,OAAO,EAAO;AAACC,QAAAA,aAAa,EAAE,YAAYV;AAA5B;AALZ,KAAD,CAAL,CAMGW,IANH,CAMQ,UAAAC,QAAQ,EAAI;AAChBV,MAAAA,aAAa,CAACH,IAAD,EAAQC,KAAR,EAAgBC,QAAhB,CAAb;AACAJ,MAAAA,KAAK,CAACgB,IAAN,CAAW;AACPC,QAAAA,IAAI,EAAUF,QAAQ,CAACL,IAAT,CAAcQ,OADrB;AAEPC,QAAAA,IAAI,EAAUJ,QAAQ,CAACL,IAAT,CAAcU,OAAd,GAAwB,SAAxB,GAAoC,QAF3C;AAGPC,QAAAA,QAAQ,EAAM,IAHP;AAIPC,QAAAA,SAAS,EAAK;AACVC,UAAAA,KAAK,EAAS,OADJ;AAEVC,UAAAA,UAAU,EAAI,aAFJ;AAGVC,UAAAA,SAAS,EAAK;AAHJ;AAJP,OAAX;AAUH,KAlBD;AAoBH,GArBD;AAsBH,CAvBM;;AA0BP,IAAMpB,aAAa,GAAG,SAAhBA,aAAgB,CAACH,IAAD,EAAQC,KAAR,EAAgBC,QAAhB,EAA8B;AAChDN,EAAAA,KAAK,CAAC;AACFU,IAAAA,GAAG,EAAWT,KAAK,CAACS,GAAN,GAAY,eADxB;AAEFC,IAAAA,MAAM,EAAQ,KAFZ;AAGFE,IAAAA,MAAM,EAAQ;AAAET,MAAAA,IAAI,EAAJA;AAAF,KAHZ;AAIFU,IAAAA,OAAO,EAAO;AAACC,MAAAA,aAAa,EAAE,YAAYV;AAA5B;AAJZ,GAAD,CAAL,CAKGW,IALH,CAKQ,UAAAC,QAAQ,EAAI;AAChBX,IAAAA,QAAQ,CAAC;AAACe,MAAAA,IAAI,EAAE,kBAAP;AAA2BO,MAAAA,OAAO,EAAEX,QAAQ,CAACL;AAA7C,KAAD,CAAR;AACH,GAPD;AAQH,CATD;;AAYA,OAAO,IAAMiB,OAAO,GAAG,SAAVA,OAAU,CAACzB,IAAD,EAAQC,KAAR,EAAmB;AACtC,SAAO,UAACC,QAAD,EAAc;AACjBN,IAAAA,KAAK,CAAC;AACFU,MAAAA,GAAG,EAAWT,KAAK,CAACS,GAAN,GAAY,qBADxB;AAEFC,MAAAA,MAAM,EAAQ,MAFZ;AAGFG,MAAAA,OAAO,EAAO;AAACC,QAAAA,aAAa,EAAE,YAAYV;AAA5B,OAHZ;AAIFQ,MAAAA,MAAM,EAAQ;AAAET,QAAAA,IAAI,EAAJA;AAAF;AAJZ,KAAD,CAAL,CAKGY,IALH,CAKQ,UAAAC,QAAQ,EAAI;AAChBX,MAAAA,QAAQ,CAAC;AAACe,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACAnB,MAAAA,KAAK,CAACgB,IAAN,CAAW;AACPC,QAAAA,IAAI,EAAUF,QAAQ,CAACL,IAAT,CAAcQ,OADrB;AAEPC,QAAAA,IAAI,EAAUJ,QAAQ,CAACL,IAAT,CAAcU,OAAd,GAAwB,SAAxB,GAAoC,QAF3C;AAGPC,QAAAA,QAAQ,EAAM,IAHP;AAIPC,QAAAA,SAAS,EAAK;AACVC,UAAAA,KAAK,EAAS,OADJ;AAEVC,UAAAA,UAAU,EAAI,aAFJ;AAGVC,UAAAA,SAAS,EAAK;AAHJ;AAJP,OAAX;AAUH,KAjBD;AAmBH,GApBD;AAqBH,CAtBM","sourcesContent":["import axios from \"axios\";\nimport CONST from \"../consts\";\nimport {Toast} from \"native-base\";\n\n\n\nexport const getNotifications = (lang , token) => {\n    return (dispatch) => {\n        Notifications(lang, token, dispatch)\n    }\n};\n\n\n\nexport const deleteNoti = (lang , id , token ) => {\n    return (dispatch) => {\n        axios({\n            url         : CONST.url + 'delete-notification',\n            method      : 'POST',\n            data        : {id},\n            params      : { lang },\n            headers     : {Authorization: 'Bearer ' + token}\n        }).then(response => {\n            Notifications(lang , token , dispatch);\n            Toast.show({\n                text        : response.data.message,\n                type        : response.data.success ? \"success\" : \"danger\",\n                duration    : 3000,\n                textStyle   : {\n                    color       : \"white\",\n                    fontFamily  : 'flatRegular',\n                    textAlign   : 'center'\n                }\n            });\n        });\n\n    }\n};\n\n\nconst Notifications = (lang , token , dispatch ) => {\n    axios({\n        url         : CONST.url + 'notifications',\n        method      : 'GET',\n        params      : { lang },\n        headers     : {Authorization: 'Bearer ' + token}\n    }).then(response => {\n        dispatch({type: 'getNotifications', payload: response.data});\n    });\n};\n\n\nexport const getNoti = (lang , token ) => {\n    return (dispatch) => {\n        axios({\n            url         : CONST.url + 'allow-notifications',\n            method      : 'POST',\n            headers     : {Authorization: 'Bearer ' + token},\n            params      : { lang },\n        }).then(response => {\n            dispatch({type: 'isNotify'});\n            Toast.show({\n                text        : response.data.message,\n                type        : response.data.success ? \"success\" : \"danger\",\n                duration    : 3000,\n                textStyle   : {\n                    color       : \"white\",\n                    fontFamily  : 'flatRegular',\n                    textAlign   : 'center'\n                }\n            });\n        });\n\n    }\n};\n"]},"metadata":{},"sourceType":"module"}